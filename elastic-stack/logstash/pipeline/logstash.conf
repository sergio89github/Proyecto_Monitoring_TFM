 # Listens on 514/udp and 514/tcp by default; change that to non-privileged port
 # syslog { port => 51415 }

input {
  beats {
    port => 5044
    type => container
  }
}


filter {
  grok {
    break_on_match => false
#    match => {"message" => "Status: ?%{NUMBER:Status} .* (?<resourceId>([a-zA-Z]{3}):([a-z]{3}):((AS|as)\d{2})(:([^:, ]*)){4}) .* %{IP:ip}"}
#    match => {"message" => ["Status: ?%{NUMBER:Status}","(?<resourceId>([a-zA-Z]{3}):([a-z]{3}):((AS|as)\d{2})(:([^:, ]*)){4})","%{IP:ip}"]}
    match => {"message" => ["Status: ?%{NUMBER:Status}","ResourceID: ?%{NOTSPACE:resourceId}","%{IP:ip}"]}
  }

  # To map the target Geo IP if plausible

  geoip {
    source => "ip"
#    target => "geoip"
#    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
#    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  mutate {
         gsub => [
          # deletes the IP field
          "message", "(IP: ?[.\d]*)", "",
          "message", "(Status: ?[\d]*)", "",
          "message", "(ResourceID: ?\S+)", ""
          #"message", "([a-zA-Z]*: ?([a-zA-Z]{3}):([a-z]{3}):((AS|as)\d{2})(:([^:, ]*)){4})", ""
          # replace backslashes, question marks, hashes, and minuses
          # with a dot "."
          #"fieldname2", "[\\?#-]", "."
        ]


  }
}

output {

elasticsearch {
hosts => ["elasticsearch:9200"]

    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    manage_template => true
    template => "/usr/share/logstash/config/filebeat"
    template_overwrite => true
    password => "3l4st1C@21"
    user => "elastic"
}

# Esta lÃ­nea imprime los logs que estoy enviando en la consola (stdout) en tiempo real, incluyendo posibles errores.
# stdout { codec => rubydebug }


}
